{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { APIkey } from '../../common/apis/MovieApiKey';\nimport movieApi from '../../common/apis/movieApi'; // its take two arguments identifier and callvbackfunction and one more is object\n\nexport const fetchAsyncMovies = createAsyncThunk('movies/fetchAsyncMovies', async term => {\n  // const movieText = 'Harry';\n  const response = await movieApi.get(`?apikey=${APIkey}&s=${term}&type=movie`);\n  return response.data;\n});\nexport const fetchAsyncShows = createAsyncThunk('movies/fetchAsyncShows', async term => {\n  // const seriesText = 'Friends';\n  const response = await movieApi.get(`?apikey=${APIkey}&s=${term}&type=series`);\n  return response.data;\n});\nexport const fetchAsyncMovieOrShowDetail = createAsyncThunk('movies/fetchAsyncMovieOrShowDetail', async id => {\n  const response = await movieApi.get(`?apikey=${APIkey}&i=${id}&plot=full`);\n  return response.data;\n});\nconst initialState = {\n  movies: {},\n  shows: {},\n  selectedMovieOrShow: {},\n  loader: false\n};\nconst movieSlice = createSlice({\n  name: \"movies\",\n  initialState,\n  reducers: {\n    // addMovies : (state, {payload}) => {  //using immer method which takes the copy of object and then allow us to make update\n    //     state.movies = payload;\n    // },\n    removeSelectedMovieOrShow: state => {\n      state.selectedMovieOrShow = {};\n    }\n  },\n  extraReducers: {\n    [fetchAsyncMovies.pending]: state => {\n      console.log(\"Pending\");\n      state.loader = false;\n    },\n    [fetchAsyncMovies.fulfilled]: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      console.log(\"Fetched Successfully\");\n      return { ...state,\n        movies: payload,\n        loader: true\n      };\n    },\n    [fetchAsyncMovies.rejected]: state => {\n      console.log(\"Rejected\");\n      state.loader = false;\n    },\n    [fetchAsyncShows.fulfilled]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      console.log(\"Fetched Successfully\");\n      return { ...state,\n        shows: payload,\n        loader: true\n      };\n    },\n    [fetchAsyncMovieOrShowDetail.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      console.log(\"Fetched Successfully\");\n      return { ...state,\n        selectedMovieOrShow: payload\n      };\n    }\n  }\n}); // export const {addMovies} = movieSlice.actions;\n\nexport const {\n  removeSelectedMovieOrShow\n} = movieSlice.actions;\nexport const getAllMovies = state => state.movies.movies;\nexport const getAllShows = state => state.movies.shows;\nexport const getSelectedMovieOrShow = state => state.movies.selectedMovieOrShow;\nexport const getLoader = state => state.movies.loader;\nexport default movieSlice.reducer;","map":{"version":3,"sources":["C:/Users/moham/OneDrive/Desktop/redux-toolkit/src/features/movies/movieSlice.js"],"names":["createSlice","createAsyncThunk","APIkey","movieApi","fetchAsyncMovies","term","response","get","data","fetchAsyncShows","fetchAsyncMovieOrShowDetail","id","initialState","movies","shows","selectedMovieOrShow","loader","movieSlice","name","reducers","removeSelectedMovieOrShow","state","extraReducers","pending","console","log","fulfilled","payload","rejected","actions","getAllMovies","getAllShows","getSelectedMovieOrShow","getLoader","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport {APIkey} from '../../common/apis/MovieApiKey';\r\nimport movieApi from '../../common/apis/movieApi'\r\n\r\n// its take two arguments identifier and callvbackfunction and one more is object\r\nexport const fetchAsyncMovies = createAsyncThunk('movies/fetchAsyncMovies', async(term) => {\r\n    // const movieText = 'Harry';\r\n    const response = await movieApi.get(`?apikey=${APIkey}&s=${term}&type=movie`)\r\n    return response.data;\r\n});\r\n\r\nexport const fetchAsyncShows = createAsyncThunk('movies/fetchAsyncShows', async(term) => {\r\n    // const seriesText = 'Friends';\r\n    const response = await movieApi.get(`?apikey=${APIkey}&s=${term}&type=series`)\r\n    return response.data;\r\n});\r\n\r\nexport const fetchAsyncMovieOrShowDetail = createAsyncThunk('movies/fetchAsyncMovieOrShowDetail', async(id) => {\r\n    const response = await movieApi.get(`?apikey=${APIkey}&i=${id}&plot=full`)\r\n    return response.data;\r\n});\r\n\r\nconst initialState = {\r\n    movies:{},\r\n    shows: {},\r\n    selectedMovieOrShow: {},\r\n    loader : false,\r\n}\r\n\r\nconst movieSlice = createSlice({\r\n    name:\"movies\",\r\n    initialState,\r\n    reducers:{\r\n        // addMovies : (state, {payload}) => {  //using immer method which takes the copy of object and then allow us to make update\r\n        //     state.movies = payload;\r\n        // },\r\n        removeSelectedMovieOrShow : (state) => {\r\n            state.selectedMovieOrShow = {};\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchAsyncMovies.pending]: (state) => {\r\n            console.log(\"Pending\");\r\n            state.loader = false;\r\n        },\r\n        [fetchAsyncMovies.fulfilled]: (state, {payload}) => {\r\n            console.log(\"Fetched Successfully\");\r\n            return {...state, movies:payload, loader : true};\r\n        },\r\n        [fetchAsyncMovies.rejected]: (state) => {\r\n            console.log(\"Rejected\");\r\n            state.loader = false;\r\n        },\r\n        [fetchAsyncShows.fulfilled]: (state, {payload}) => {\r\n            console.log(\"Fetched Successfully\");\r\n            return {...state, shows:payload, loader : true};\r\n        },\r\n        [fetchAsyncMovieOrShowDetail.fulfilled]: (state, {payload}) => {\r\n            console.log(\"Fetched Successfully\");\r\n            return {...state, selectedMovieOrShow:payload};\r\n        },\r\n    },\r\n    \r\n})\r\n\r\n// export const {addMovies} = movieSlice.actions;\r\nexport const {removeSelectedMovieOrShow} = movieSlice.actions;\r\nexport const getAllMovies = (state) => state.movies.movies;\r\nexport const getAllShows = (state) => state.movies.shows;\r\nexport const getSelectedMovieOrShow = (state) => state.movies.selectedMovieOrShow;\r\nexport const getLoader = (state) => state.movies.loader;\r\n\r\nexport default movieSlice.reducer;"]},"metadata":{},"sourceType":"module"}